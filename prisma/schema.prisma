// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String       @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  cerclesCreated      Cercle[]
  invitationsSent     Invitation[] @relation("User_InvitationCreator")
  invitationsReceived Invitation[] @relation("User_InvitedUser")
  questionnaire       Questionnaire[]
  questions           Question[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cercle {
  id          String       @id @default(cuid())
  name        String       @unique
  private     Boolean      @default(true)
  contact     String?
  creator     User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId   String?
  createdOn   DateTime     @default(now())
  invitations Invitation[]
  questionnaires Questionnaire[]
}

enum InvitationType {
  EMAIL
}

model Invitation {
  id           String         @id @default(cuid())
  type         InvitationType @default(EMAIL)
  invitedEmail String?          // Should only exists while no User attached (email-leak?)
  invitedUser  User?          @relation("User_InvitedUser", fields: [invitedId], references: [id], onDelete: Cascade)
  invitedId    String?
  creator      User           @relation("User_InvitationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  cercle       Cercle         @relation(fields: [cercleId], references: [id], onDelete: Cascade)
  cercleId     String
  createdOn    DateTime       @default(now())

  @@unique([type, invitedEmail, creatorId, cercleId])
  @@unique([type, invitedId, creatorId, cercleId])
}

model Questionnaire {
  id           String         @id @default(cuid())
  name         String
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  createdOn    DateTime       @default(now())
  welcomeText  String?
  questions    Question[]
  cercle       Cercle         @relation(fields: [cercleId], references: [id], onDelete: Cascade)
  cercleId     String

  @@unique([cercleId, name])
}

enum QuestionType {
  TEXT
  LONGTEXT
  // https://www.typeform.com/surveys/likert-scale-questionnaires/
  LIKERT
}

model Question {
  id           String         @id @default(cuid())
  type         QuestionType   @default(TEXT)
  name         String
  description  String?
  questionnaire    Questionnaire   @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  questionnaireId  String
  createdOn    DateTime       @default(now())
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  answers      Answer[]
  possibleAnswers   PossibleAnswer[]

  @@unique([questionnaireId, name])
}

enum PossibleAnswerType {
  TEXT
  NUMBER
}

model PossibleAnswer {
  id           String         @id @default(cuid())
  type         PossibleAnswerType   @default(NUMBER)
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  possibleText String?
  possibleNumber Int?
  order        Int            @default(0)

  @@unique([questionId, possibleText, possibleNumber])
  @@unique([questionId, order])
}

model Answer {
  id           String         @id @default(cuid())
  hashUid      String
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  answerNum    Int?
  answerText   String?
  createdOn    DateTime       @default(now())

  @@unique([questionId, hashUid])
}